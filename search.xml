<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git—最先进的分布式版本控制系统]]></title>
    <url>%2F2018%2F07%2F17%2Fuse-git%2F</url>
    <content type="text"><![CDATA[Git的一些常用操作命令 开始使用 Git ——找到三颗痣创建版本库首先到你需要建立版本库的目录，然后在命令行里输入：1$ git init ps：该目录里会多一个.git目录，请不要随便修改里面的文件 添加文件1$ git add &lt;file&gt; 可以多次添加文件，然后一次性提交。 提交文件1$ git commit -m &lt;message&gt; -m 后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 Git 控制——月关宝盒掌握状态和查看修改1$ git status git status 命令可以让我们时刻掌握仓库当前的状态。 1$ git diff &lt;file&gt; 在你修改文件但还没添加或提交的时候，diff 可以告诉你到底哪里修改了 1$ git diff 版本回退一旦你把文件改乱了，或者误删了文件，可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。 在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看： 1$ git log 其中打印出来的commit 那一行就是 这次版本的 ID 号， ID 号特别有用。 如果有一个文件叫 use_git.txt 最经有三次版本提交，比如commit1、commit2、commit3，git log 命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是commit3，上一次是commit2，最早的一次是commit1。 好了，现在我们启动月关宝盒，准备把use_git.txt回退到上一个版本，也就是commit2的那个版本，怎么做呢？ 首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交commit3，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 现在，我们要把当前版本commit3回退到上一个版本commit2，就可以使用git reset命令： 1$ git reset --hard HEAD^ 好了，现在我们已经会退到版本commit2 了，最新的那个版本commit3已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？ 办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个 commit3 的 commit id 是 xxx… ，于是就可以指定回到未来的某个版本： 1$ git reset --hard xxx 好了，现在我们又退到版本commit3 了版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为 Git可能会找到多个版本号，就无法确定是哪一个了。 现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？ 在Git中，总是有后悔药可以吃的。当你用1$ git reset --hard HEAD^ 回退到commit2版本时，再想恢复到commit3，就必须找到commit3的 commit id。Git提供了一个命令git reflog用来记录你的每一次命令： 1$ git reflog 修改文件场景一：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令： 1$ git checkout -- file 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令1$ git reset HEAD &lt;file&gt; 就回到了场景1，第二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退那一步，不过前提是没有推送到远程库。 删除文件1$ git rm &lt;file&gt; 然后： 1$ git commit -m &lt;message&gt; 就把该文件从版本库里删除了。 如果误删了，可以： 1$ git checkout -- &lt;file&gt; git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 远程仓库——五百年前后的记忆添加远程仓库现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。 你首先在Github上新建一个仓库，如命名learngit，目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令: 1$ git remote add origin git@github.com:&lt;name&gt;/learngit.git 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。 下一步，就可以把本地库的所有内容推送到远程库上： 1$ git push -u origin master 把本地库的内容推送到远程，用 git push 命令，实际上是把当前分支master推送到远程。 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 从现在起，只要本地作了提交，就可以通过命令： 1$ git push origin master 把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库。 从远程库克隆1$ git clone git@github.com:&lt;name&gt;/&lt;repo name&gt;.git 也可以通过： 1$ git clone https://github.com/&lt;naem&gt;/&lt;repo name&gt;.git 进行克隆。 分支管理敬请期待。。。 标签管理敬请期待。。。 参考文献：廖雪峰老师的Git教程]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客主题优化之next]]></title>
    <url>%2F2018%2F07%2F16%2Fhexo-next%2F</url>
    <content type="text"><![CDATA[如何个性化打造博客 Hexo主题–next下载安装next在你的博客站点根目录，打开命令行输入： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 然后在 themes 文件夹里面就能看到下好的包含 next 主题的文件夹： 最后打开根目录下的 _config.yml 文件，找到 theme ，修改截图如下： 这样子 next 主题就下载安装好了，在根目录命令行输入： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 然后打开 localhost:4000 看下你的新博客界面吧： 设置 next 的 schemenext 主题也有好几种风格，通过修改主题目录的 _config.yml 文件来改变风格，修改如下： 博客风格也就变成了： 设置菜单我们目前博客菜单才仅仅只有首页、归档两项，next 主题还内置了一些菜单栏可供挑选设置，打开主题目录的 _config.yml 文件，然后找到 menu ： 要设置的就把 # 去掉就行了。 这时候如果打开那几项菜单选项还是会出现 404 页面的，你还需要把这几个页面新建出来，通过在根目录命令行输入以下命令： 1hexo new page &quot;你要新建的菜单名字&quot; 然后就可以在根目录下的 source 文件夹中找到了： 在博客里的菜单选项也可以打开啦。 设置侧栏，头像，网页logo1.侧栏的设置：打开主题目录的 _config.yml 文件，找到 sidebar: 可以把 position 设置为 right 或 left设置成功截图如下： 2.头像的设置：打开主题目录的 _config.yml 文件，找到 avatar 后面加你头像的路径（最好把头像放到它原先设置的地方）设置成功截图如下： 3.网页logo的设置：打开主题目录的 _config.yml 文件，找到 favicon 把下面 medium 后面改成你的网页logo的文件。设置成功截图如下： 修改文章底部的那个带#号的标签修改模板 /themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;# ，将 # 换成 设置成功截图如下： 主页文章添加阴影效果打开 \themes\next\source\css_custom\custom.styl 文件,向里面加入： 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 设置成功截图如下： 个性化设置点击桃心首先在 /themes/next/source/js/src 文件夹下新建一个 clicklove.js 文件，把下面这段代码复制进去： 1!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 然后修改 \themes\next\layout_layout.swig 文件，在末尾添加这段代码： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt; 这样子点击就会有小爱心出现啦。 设置成功截图如下： 头像旋转找到 /themes/next/source/css/_common/components/sidebar/sidebar-author.styl 文件，修改为以下代码： 1234567891011121314151617181920212223242526272829.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; border-radius: 60%; transition: 2.5s all; &#125;.site-author-image:hover &#123; transform: rotate(360deg);&#125;.site-author-name &#123; margin: $site-author-name-margin; text-align: $site-author-name-align; color: $site-author-name-color; font-weight: $site-author-name-weight;&#125;.site-description &#123; margin-top: $site-description-margin-top; text-align: $site-description-align; font-size: $site-description-font-size; color: $site-description-color;&#125; 这样子头像就变成圆形而且能够旋转了。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello, blog!]]></title>
    <url>%2F2018%2F07%2F14%2FHello-blog-0%2F</url>
    <content type="text"><![CDATA[如何通过Github Pages + hexo搭建个人博客 搭建环境安装Node.js可以直接去官网下载安装，安装成功截图如下： 安装git可以直接去官网下载安装，安装成功截图如下： 安装hexo在自己认为合适的地方新建一个文件夹，我是在 E:/Notes/ 建了一个blog文件夹，然后通过命令行进入该文件夹内： 接着输入 npm install hexo -g 安装hexo，安装成功截图如下： 最后输入 hexo init 初始化文件夹，初始化好后输入 npm install 安装所需要的组件，文件夹如下： 现在你就可以体验一下hexo啦，输入 hexo g &amp;&amp; hexo s 启动服务器，默认端口为4000，所以打开浏览器，输入 http://localhost:4000 ，hexo界面就出现啦： 配置Github配置Github PagesGithub账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README： 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它: 将Hexo与Github page联系起来首先要先配置github的ssh key（如果是第一次使用git），详情请见官方教程。 任意目录右键点击gitbash here，输入 ssh -T git@github.com 测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了，成功截图如下： 然后配置hexo，打开 blog/_config.yml ，在末尾找到 deploy: ，配置如下： 将其中的hcwnbs换成你自己创建的项目名就行了。 上传你的第一篇博客到此为止，所有的基本配置已经全部完成，接下来就可以写你的第一篇博客并上传啦！ 新建一篇博客在cmd执行命令： hexo new post “博客名” 这时候在文件夹_posts目录下将会看到已经创建的文件： 在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save 使用编辑器编辑创建的 hello-hexo.md 文件，使用的是 markdown 语法这里推荐一个网页版的 markdown 编辑器，可以边预览边编辑，还有教程：Cmd Markdown编辑阅读器： 接下来只要输入 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 就可以生成以及部署博客啦。部署成功后访问你的地址： http://用户名.github.io 。那么将看到生成的文章： 好啦，到此为止，一个个人博客就搭好啦，接下来如果想要好好布置你的博客，并实现各种个性化设置，请看博客布置篇。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>npm</tag>
        <tag>基础</tag>
      </tags>
  </entry>
</search>
